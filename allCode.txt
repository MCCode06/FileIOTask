import java.util.*;

public class Main {
    public static void main(String[] args) {
        // Teachers
        Teacher teacher1 = new Teacher("Khanum", "Jafarova", 35, "Female");
        Teacher teacher2 = new Teacher("Asim", "Namazov", 42, "Male");

        // Courses
        Course calc = new Course("Calculus", teacher1);
        Course netw = new Course("Network", teacher2);
        teacher1.canTeach(calc);
        teacher2.canTeach(netw);

        List<Course> availableCourses = Arrays.asList(calc, netw);

        // Students
        List<Student> students = new ArrayList<>();
        students.add(new Student("Sanani", "Zeynalli", 19, "Male"));
        students.add(new Student("Javid", "Nazarov", 19, "Male"));
        students.add(new Student("Seyfulla", "Mehdiyev", 19, "Male"));
        students.add(new Student("Farid", "Mehtiyev", 19, "Non-binary"));
        students.add(new Student("Xagani", "Zeynalli", 20, "Male"));


        for (Student student : students) {
            System.out.println("--- " + student.firstName + " " + student.lastName + " ---");
            for (int i = 0; i < 2; i++) {
                Course course = availableCourses.get(i);
                student.enroll(course);
                course.makeExam(student);
            }
            System.out.println('\n');
        }

        System.out.println('\n');
        System.out.println("====== STUDENT GRADES ======");
        for (Student student : students) {
            System.out.println("Grades for " + student.firstName + " " + student.lastName + ":");
            for (Course course : availableCourses) {
                Double grade = student.getGrades().get(course);
                if (grade != null) {
                    System.out.println(course.getName() + ": " + grade);
                }
            }
            System.out.println('\n');
        }
    }
}


import java.util.*;

public abstract class Human {
    protected String firstName;
    protected String lastName;
    protected int age;
    protected String gender;

    public Human(String firstName, String lastName, int age, String gender) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
        this.gender = gender;

    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public abstract void whoami();
}


import java.util.*;

public class Student extends Human {
    private List<Course> courses;
    private Map<Course, Double> grades;

    public Student(String firstName, String lastName, int age, String gender) {
        super(firstName, lastName, age, gender);
        this.courses = new ArrayList<>();
        this.grades = new HashMap<>();
    }

    public void enroll(Course course) {
        courses.add(course);
    }

    public void addGrade(Course course, double grade) {
        grades.put(course, grade);
    }

    public Map<Course, Double> getGrades() {
        return grades;
    }

    public List<Course> getCourses() {
        return courses;
    }

    @Override
    public void whoami() {
        System.out.println("I am student: " + firstName + ' ' + lastName);
    }
}
import java.util.*;

public class Teacher extends Human implements Teacherable {
    private List<Course> courses;

    public Teacher(String firstName, String lastName, int age, String gender) {
        super(firstName, lastName, age, gender);
        this.courses = new ArrayList<>();
    }

    @Override
    public void canTeach(Course course) {
        courses.add(course);
        System.out.println(firstName + ' ' + lastName + " is teaching " + course.getName());
    }

    @Override
    public void whoami() {
        System.out.println("I am teacher " + firstName + ' ' + lastName);
    }
}

import java.util.*;

public class Course {
    private String name;
    private Teacher teacher;

    public Course(String name, Teacher teacher) {
        this.name = name;
        this.teacher = teacher;
    }

    public void makeExam(Student student) {
        Exam exam = new Exam(student, this);
        double grade;

        Random rand = new Random();
        int dice = rand.nextInt(6) + 1;
        if (dice == 6) {
            grade = exam.alvinEvaluates();
        }
        else {
            grade = exam.evaluate();
        }
        grade = (double) (Math.round(grade * 100)) / 100; // learned from gpt
        student.addGrade(this, grade);
    }

    public String getName() {
        return name;
    }

    public Teacher getTeacher() {
        return teacher;
    }
}
import java.util.*;

public class Exam implements Gradable{
    private Student student;
    private Course course;

    public Exam(Student student, Course course) {
        this.student = student;
        this.course = course;
    }

    @Override
    public double evaluate() {
        double grade = new Random().nextDouble() * 100;
        while (grade < 70){
            grade = new Random().nextDouble() * 100;
        }
        System.out.println(student.getFirstName() + ' ' + student.getLastName() + " is graded for course -> " + course.getName() + ": " + grade);
        return grade;
    }

    @Override
    public double alvinEvaluates(){
        double grade = new Random().nextDouble() * 100;
        while (grade > 60 || grade < 30) {
            grade = new Random().nextDouble() * 100;
        }
        System.out.println(student.getFirstName() + ' ' + student.getLastName() + " is graded for course by the Alvin method -> " + course.getName() + ": " + grade);
        return grade;
    }
}


public interface Teacherable {
    void canTeach(Course course);
}
public interface Gradable {
    double evaluate();

    double alvinEvaluates();
}



import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

import java.io.File;
import java.io.IOException;
import java.util.List;

public class FileSaver {

    private static final ObjectMapper mapper = new ObjectMapper()
            .enable(SerializationFeature.INDENT_OUTPUT);

    public static <T> void saveToJson(List<T> data, String filename) {
        try {
            mapper.writeValue(new File(filename), data);
            System.out.println("Saved data to " + filename);
        } catch (IOException e) {
            System.err.println("Failed to save data to " + filename);
            e.printStackTrace();
        }
    }
}



public class ExamResult {
    private String studentFirstName;
    private String studentLastName;
    private String courseName;
    private double grade;

    public ExamResult(String studentFirstName, String studentLastName, String courseName, double grade) {
        this.studentFirstName = studentFirstName;
        this.studentLastName = studentLastName;
        this.courseName = courseName;
        this.grade = grade;
    }

    // Required: Jackson needs a default constructor
    public ExamResult() {
    }

    // Getters and setters
    public String getStudentFirstName() {
        return studentFirstName;
    }

    public void setStudentFirstName(String studentFirstName) {
        this.studentFirstName = studentFirstName;
    }

    public String getStudentLastName() {
        return studentLastName;
    }

    public void setStudentLastName(String studentLastName) {
        this.studentLastName = studentLastName;
    }

    public String getCourseName() {
        return courseName;
    }

    public void setCourseName(String courseName) {
        this.courseName = courseName;
    }

    public double getGrade() {
        return grade;
    }

    public void setGrade(double grade) {
        this.grade = grade;
    }
}





